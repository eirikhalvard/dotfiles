#!/bin/bash
##################### GENERIC EXPORTS #####################
export PATH=$PATH:$HOME/bin
export PATH=$PATH:$HOME/.config/scripts
export PATH=$PATH:$HOME/.local/bin/
export PATH=$PATH:"/Users/Eirik/bin/FDK/Tools/osx"
export FDK_EXE="/Users/Eirik/bin/FDK/Tools/osx"

##################### CUSTOM EXPORTS ######################
export DRIVE=$HOME/Drive
export SKOLE=$DRIVE/Skole
export IN4070=$SKOLE/S7/IN4070
export IN5320=$SKOLE/S7/IN5320
export IN5290=$SKOLE/S7/IN5290
export IN2040=$SKOLE/S7/IN2040
export PROSJEKTER=$SKOLE/Prosjekter
export GITHUB=$HOME/GitHub
export CONFIG=$HOME/.config

##################### ALIAS NAVIGATION ####################
alias 4070="cd \$IN4070"
alias 5320="cd \$IN5320"
alias 5290="cd \$IN5290"
alias 2040="cd \$IN2040"
alias forskerlinjen="cd \$FORSKERLINJEN"
alias prosjekter="cd \$PROSJEKTER"
alias skole="cd \$SKOLE"
alias semester="cd \SKOLE/S7"
alias github="cd \$GITHUB"
alias config="cd \$CONFIG"

##################### ALIAS COMMANDS ######################
alias c='clear'
alias pwdc='pwd | pbcopy'
alias ifi='ssh eirikhsa@login.ifi.uio.no'
alias pcat='ccat ~/.bash_profile'
alias psrc='source ~/.bash_profile'
alias hb='hub browse'
alias a='atom .'
alias vim='nvim'
alias o='open .'
alias mergepdfs='/System/Library/Automator/Combine\ PDF\ Pages.action/Contents/Resources/join.py'

alias t='tmux'
alias ta='tmux attach -t'
alias tn='tmux new -s'
alias tls='tmux ls'

alias sml='rlwrap sml'
alias scm='c && rlwrap /Applications/Racket\ v7.4/bin/plt-r5rs'
alias maude='$HOME/bin/maude/maude.darwin64'

alias -g FF='$(fzf)'
alias -g PF='| fzf'
alias -g CC='| pbcopy'

##################### FUNCTIONS ###########################

unalias z 2> /dev/null
z() {
  [ $# -gt 0 ] && _z "$*" && return
  cd "$(_z -l 2>&1 | fzf --height 40% --nth 2.. --reverse --inline-info +s --tac --query "${*##-* }" | sed 's/^[0-9,.]* *//')"
}

cdf() {
   local file
   local dir
   file=$(fzf +m -q "$1") && dir=$(dirname "$file") && cd "$dir"
 }

jc() {
  if [ "$#" -eq 0 ]; then
    javac ./*.java
  else
    javac ./*.java && java "$@"
  fi
}

mekk() {
  gaa && gcmsg "$1" && gp
}

docs() {
  livet=$1;
  case $livet in
    hoogle) open "https://hoogle.haskell.org/?hoogle=$2";;
    *) open "http://www.google.com/search?q=docs+$livet";;
  esac
}

hoogle() {
  open "https://hoogle.haskell.org/?hoogle=$1"
}

hrepl() {
  if [ "$#" -eq 0 ]; then
    echo "Please supply a haskell file to start a ghcid session with"
  else
    ghcid "$1" --test=main
  fi
}

conf() {
  # inspired from guide: https://blog.htbaa.com/news/tmux-scripting

  SESSION="conf"

  # We need to manually detach the session
  # then run the command from outside of tmux
  if [ -n "$TMUX" ] ; then 
    echo "please detach before running command!"
    return
  fi

  # Attach SESSION if it already exists
  if tmux has-session -t "$SESSION" ; then
    tmux attach-session -t "$SESSION"
    return
  fi

  # Setup and attach new session otherwise
  tmux new-session -c "$HOME/.config" -n "config" -d -s "$SESSION"
  tmux split-window -c "$HOME/.config" -h

  tmux new-window -c "$HOME/.config/nvim" -t "$SESSION:2" -n "vim"
  tmux send-keys "vim init.vim" C-m

  tmux new-window -c "$HOME/.config/shell" -t "$SESSION:3" -n "shell"
  tmux send-keys "vim bash_profile" C-m

  tmux attach-session -t "$SESSION:1"

}

codewars() {
  # attaches a new window to the haskell tmux session (creates a new session if there isn't one)
  # The window includes three panes: 
  #   1) a vim window for the codewars module
  #   2) a ghcid window that watches the file and compiles and runs `main` on save
  #   3) a ghci window for repl-work

  # inspired from guide: https://blog.htbaa.com/news/tmux-scripting

  # check for module argument
  if [ "$#" -eq 0 ]; then
    echo "Please supply name for the codewars module"
    return
  fi

  # We need to manually detach the session
  # then run the command from outside of tmux
  if [ -n "$TMUX" ] ; then 
    echo "please detach before running command!"
    return
  fi

  CODEWARS_MODULE="$1"

  SESSION="hask"
  CODEWARS_FOLDER="$PROSJEKTER/Haskell/Codewars"
  CODEWARS_FILE="$CODEWARS_FOLDER/$CODEWARS_MODULE.hs"

  if test -f "$CODEWARS_FOLDER/$CODEWARS_MODULE.hs" ; then
    echo "module already exist! Please try another name"
    return
  fi

  touch "$CODEWARS_FILE"
  echo "module $CODEWARS_MODULE where" >> "$CODEWARS_FILE"
  echo ""                              >> "$CODEWARS_FILE"
  echo "main :: IO ()"                 >> "$CODEWARS_FILE"
  echo "main = do"                     >> "$CODEWARS_FILE"
  echo "  print \"put tests here!\""   >> "$CODEWARS_FILE"

  # attach haskell session and codewars window
  if tmux has-session -t "$SESSION" ; then
    tmux new-window -c "$CODEWARS_FOLDER" -a -t "$SESSION" -n "$CODEWARS_MODULE"
  else
    tmux new-session -c "$CODEWARS_FOLDER" -n "$CODEWARS_MODULE" -d -s "$SESSION"
  fi

  tmux split-window -c "$CODEWARS_FOLDER" -t "$SESSION:$CODEWARS_MODULE" -h
  tmux split-window -c "$CODEWARS_FOLDER" -t "$SESSION:$CODEWARS_MODULE" -v

  tmux send-keys -t "$SESSION:$CODEWARS_MODULE.1" "vim $CODEWARS_MODULE.hs" C-m
  tmux send-keys -t "$SESSION:$CODEWARS_MODULE.2" "ghcid $CODEWARS_MODULE.hs --test=main" C-m
  tmux send-keys -t "$SESSION:$CODEWARS_MODULE.3" "ghci $CODEWARS_MODULE.hs" C-m


  tmux attach-session -t "$SESSION:$CODEWARS_MODULE"
}

google() {
  argString=""
  for a in "$@"; do
    if [[ "${a:0:1}" != "-" ]] # Ignore flags (first character is -)
    then
      if [[ "$argString" != "" ]]
      then
        argString+="+" # Delimeter
      fi
      argString+="$a"
    fi
  done
  open "http://www.google.com/search?q=$argString";
}

function ghcid_script {
    case "$3" in

        "-l" | "--lines")
        eval "ghcid $1 --reload=$2 --test=':cmd readFile \"$2\" >>= pure . unlines . fmap (\x -> if null x then \"putStrLn mempty\" else x) . lines'"
        ;;

        "-c" | "--clear")
        eval "ghcid $1 --reload=$2 --test=':script $2'"
        ;;

        * )
        eval "ghcid $1 --reload='$2' --test=':cmd readFile \"$2\" >>= pure . unlines . init . concatMap (\x -> [\"putStrLn (\" ++ show x ++ \")\", \"putStr \\\"==>    \\\"\", x,\"putStrLn mempty\"]) . filter (not . null) . lines'"
        ;;
    esac
}

make-zip() {
  if [ "$#" -eq 0 ]; then
    echo "You need to specify files to zip"
    echo "Usage: make-zip [fileToZip]+"
    return
  fi
  make-zip-name eirikhsa "$@"
}

make-zip-name() {
  if [ "$#" -eq 0 ]; then
    echo "You need to specify a foldername and files to zip"
    echo "Usage: make-zip-name [foldername] [fileToZip]+"
    return
  elif [ "$#" -eq 1 ]; then
    echo "You need at least one file to zip"
    echo "Usage: make-zip-name [foldername] [fileToZip]+"
    return
  fi
  foldername=$1
  shift;
  mkdir "${foldername}";
  cp "$@" "${foldername}";
  tar -czf "${foldername}.tgz" "${foldername}";
  rm -rf "${foldername:?}";
}

untar() {
  if [ "$#" -eq 0 ]; then
    echo "You need to specify a file to untar"
    return
  else
    tar -xzf "$@"
  fi
}

################## NODE VERSION MANAGER ###################
export NVM_DIR="$HOME/.nvm"
 [ -s "/usr/local/opt/nvm/nvm.sh" ] && . "/usr/local/opt/nvm/nvm.sh"  # This loads nvm
 [ -s "/usr/local/opt/nvm/etc/bash_completion" ] && . "/usr/local/opt/nvm/etc/bash_completion"  # This loads nvm bash_completion

##################### CUSTOM CONFIG ######################


##################### WELCOME MESSAGE #####################
clear;
echo Velkommen til terminalen Eirik!;
echo `date '+%H:%M - %d.%m.%Y'`;
echo;
