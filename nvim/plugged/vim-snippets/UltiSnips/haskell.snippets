priority -50

global !p
def last_module(mod):
	return mod.rstrip('.').rsplit('.', 1)[-1]

def space_if(p):
	return " " if p else ""

endglobal

snippet stanlang "Standard Language Extensions"
{-# LANGUAGE TupleSections #-}
{-# LANGUAGE OverloadedStrings #-}
endsnippet

snippet lang "Language extension"
{-# LANGUAGE $1 #-}
endsnippet

snippet impq "Qualified import"
import qualified ${1:Data.Text} as ${0:`!p snip.rv = t[1].split(".")[-1]`}
endsnippet

snippet template "Haskell Standard Template"
{-# LANGUAGE TupleSections #-}
{-# LANGUAGE OverloadedStrings #-}

module `!p snip.rv = snip.basename[0].capitalize() + snip.basename[1:]` where

import Control.Lens
import qualified Data.List as L
import qualified Data.Set as S
import qualified Data.Map as M
import qualified Data.Text as T

main :: IO ()
main = do
  print "hello"
endsnippet

snippet id "Import Data..."
import Data.$0
endsnippet

snippet ic "Import Control..."
import Control.$0
endsnippet

snippet trace "Debug Trace"
import Debug.Trace (trace)
$0-- (show >>= trace)
endsnippet

